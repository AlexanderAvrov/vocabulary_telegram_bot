import os
import logging
import random

import requests
from dotenv import load_dotenv
from sqlalchemy import and_
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, Filters, MessageHandler, Updater, CallbackQueryHandler

from animals import get_new_image_cat, new_cat, new_dog
from database import session, User, Translate, Learning

load_dotenv()
token = os.getenv('TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
)

ALPHABET_EN = (["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
                "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"])
ALPHABET_RU = (['–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω',
                '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ç', '—é', '—è'])


def translating_word(text, sl, tl):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
    url = f'https://translate.googleapis.com/translate_a/single?client=gtx&dt=t&sl={sl}&tl={tl}&q={text}'
    response = requests.get(url)
    result = response.json()
    return result[0][0][0]


def translate_me(update, context):
    """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    chat = update.effective_chat
    user = session.query(User).filter(User.id_user == chat.id).first()
    if not user:
        user = User(id_user=chat.id)
        session.add(user)
    input_text = update.message.text.lower()
    if input_text[0].lower() in ALPHABET_EN:
        source_lang, target_lang = 'en', 'ru'
        translate = session.query(Translate).filter(Translate.english_expression == input_text).first()
        if translate:
            translate_text = translate.russian_expression
    elif input_text[0].lower() in ALPHABET_RU:
        source_lang, target_lang = 'ru', 'en'
        translate = session.query(Translate).filter(Translate.russian_expression == input_text).first()
        if translate:
            translate_text = translate.english_expression
    else:
        context.bot.send_message(
            chat_id=chat.id,
            text=f'–¢–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ —è –Ω–µ –∑–Ω–∞—é! –ù–æ –∑–∞—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –∫–æ—Ç–∏–∫–æ–º',
        )
        context.bot.send_photo(chat.id, get_new_image_cat())
        return
    if not translate:
        translate_text = translating_word(input_text, source_lang, target_lang)
        if source_lang == 'en':
            translate = Translate(english_expression=input_text, russian_expression=translate_text)
            session.add(translate)
            try:
                session.commit()
            except Exception as e:
                session.rollback()
                print(e)
            translate = session.query(Translate).filter(Translate.english_expression == input_text).first()
        else:
            translate = Translate(english_expression=translate_text, russian_expression=input_text)
            session.add(translate)
            try:
                session.commit()
            except Exception as e:
                session.rollback()
                print(e)
            translate = session.query(Translate).filter(Translate.russian_expression == input_text).first()
    try:
        is_learning = session.query(Learning).filter(
            and_(Learning.user == user.id, Learning.word == translate.id)).first()
    except Exception as e:
        session.rollback()
        print(e)
        return
    if not is_learning:
        session.add(Learning(user=user.id, word=translate.id, is_learned=False))
    try:
        session.commit()
    except Exception as e:
        session.rollback()
        print(e)

    context.bot.send_message(
        chat_id=chat.id,
        text=f'{input_text} - {translate_text}',
    )
    print(f'–°–¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥: {input_text} - {translate_text}. –î–ª—è {update.message.from_user.username}')


def get_random_exclude(exclude, max_digit):
    """–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏"""
    rand_integer = random.randint(0, max_digit)
    return get_random_exclude(exclude, max_digit) if rand_integer in exclude else rand_integer


def testing_words(update, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user = session.query(User).filter(User.id_user == update.effective_chat.id).first()
    translates = user.translates
    count_words = len(translates)
    if count_words < 3:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=('–£ –≤–∞—Å –º–∞–ª–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã —Ç—Ä–∏ —à—Ç—É–∫–∏. '
                  '–ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –µ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º.')
        )
        return
    first = get_random_exclude([None], (count_words - 1))
    second = get_random_exclude([first], (count_words - 1))
    third = get_random_exclude([first, second], (count_words - 1))
    target_word = translates[first].russian_expression
    first_answer = get_random_exclude([None], 2)
    second_answer = get_random_exclude([first_answer], 2)
    third_answer = get_random_exclude([first_answer, second_answer], 2)
    answers = [translates[first], translates[second], translates[third]]
    keyboard = [[InlineKeyboardButton(f'1Ô∏è‚É£ {answers[first_answer].russian_expression}', callback_data=(
        'correct' if answers[first_answer].russian_expression == target_word else 'wrong'))],
                [InlineKeyboardButton(f'2Ô∏è‚É£ {answers[second_answer].russian_expression}', callback_data=(
                    'correct' if answers[second_answer].russian_expression == target_word else 'wrong'))],
                [InlineKeyboardButton(f'3Ô∏è‚É£ {answers[third_answer].russian_expression}', callback_data=(
                    'correct' if answers[third_answer].russian_expression == target_word else 'wrong'))],
                [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå', callback_data=f'delete-{translates[first].id}-test')],
                [InlineKeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ ‚õî', callback_data='stop')]
                ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'üá¶üá∫ {translates[first].english_expression} - —ç—Ç–æ ...',
        reply_markup=reply_markup
    )


def repeat_words(update, context, count=0):
    """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤"""
    user = session.query(User).filter(User.id_user == update.effective_chat.id).first()
    translates = user.translates
    if count >= len(translates):
        count = 0
    if len(translates) < 1:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text='–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è üôÅ –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ —Å–ª–æ–≤–æ.')
        return
    translate = translates[count]
    keyboard = [[InlineKeyboardButton('–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è', callback_data=f'next-{count}')],
                [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå', callback_data=f'delete-{translate.id}-repeat-{count}')],
                [InlineKeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ ‚õî', callback_data='stop')]
                ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'üá¶üá∫ {translate.english_expression} - {translate.russian_expression} üá∑üá∫',
            reply_markup=reply_markup
        )


def check_answer(update, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (callback_query)"""
    query = update.callback_query
    if query.data == 'correct':
        context.bot.send_message(chat_id=update.effective_chat.id, text='–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ')
    elif query.data == 'wrong':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'‚õî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ÄºÔ∏è')
    elif 'next' in query.data:
        data = query.data.split('-')
        count = int(data[1])
        count += 1
        return repeat_words(update, context, count)
    elif 'delete' in query.data:
        data = query.data.split('-')
        count = int(data[1])
        count += 1
        translate_id = data[1]
        user = session.query(User).filter(User.id_user == update.effective_chat.id).first()
        session.query(Learning).filter(and_(Learning.user == user.id, Learning.word == translate_id)).delete()
        session.commit()
        if data[2] == 'repeat':
            return repeat_words(update, context, count)
        else:
            return testing_words(update, context)
    elif query.data == 'stop':
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f' –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ –æ–∫–æ–Ω—á–µ–Ω–æ ü§ó'
        )
        return
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: ... ‚¨áÔ∏è')
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'...')
    testing_words(update, context)




def wake_up(update, context):
    chat = update.effective_chat
    name = update.message.chat.first_name
    button = ReplyKeyboardMarkup([
                                  ['/repeat'],
                                  ['/test'],
                                 ], resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text=f'–ü—Ä–∏–≤–µ—Ç, {update.message.from_user.first_name}. –ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —è —Ç–µ–±–µ –Ω–∞—à—ë–ª',
        reply_markup=button
    )

    context.bot.send_photo(chat.id, get_new_image_cat())
    context.bot.send_message(
        chat_id=chat.id,
        text=('–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –≤ —á–∞—Ç.'
              ' –¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.'),
        reply_markup=button
    )


def main():
    updater = Updater(token=token)
    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CommandHandler('foto_cat', new_cat))
    updater.dispatcher.add_handler(CommandHandler('foto_dog', new_dog))
    updater.dispatcher.add_handler(CommandHandler('test', testing_words))
    updater.dispatcher.add_handler(CommandHandler('repeat', repeat_words))
    updater.dispatcher.add_handler(CallbackQueryHandler(check_answer))

    updater.dispatcher.add_handler(MessageHandler(Filters.text, translate_me))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
